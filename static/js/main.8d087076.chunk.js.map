{"version":3,"sources":["store/modules/houses.js","components/HouseCard/HouseCard.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FETCH_HOUSES_PENDING","FETCH_HOUSES_SUCCESS","FETCH_HOUSES_ERROR","pagination","total","offset","initialState","errors","pending","HouseCard","props","_props$house","house","images","id","_props$house$location","location","settlementName","mkadDistance","saleOffer","area","landDetails","specification","react_default","a","createElement","className","src","concat","alt","price","API","LIMIT","OFFSET","App","state","itemsPerPage","currentPage","fetchData","url","Object","assertThisInitialized","_this","fetchHouses","fetch","then","response","json","data","fetchHousesSuccess","objectSpread","catch","fetchHousesError","handlePageChange","_ref","selected","setState","handleItemsChange","event","parseInt","target","value","_this$state","this","_this2","_this$props$houses","houses","items","_this$state2","react","type","onClick","pageCount","Math","ceil","map","element","components_HouseCard_HouseCard","key","dist_default","previousLabel","nextLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","forcePage","onChange","Component","mapDispatchToProps","payload","connect","store","Boolean","window","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","createStore","composeWithDevTools","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d087076.chunk.js","sourcesContent":["const FETCH_HOUSES_PENDING = 'FETCH_HOUSES_PENDING';\nconst FETCH_HOUSES_SUCCESS = 'FETCH_HOUSES_SUCCESS';\nconst FETCH_HOUSES_ERROR = 'FETCH_HOUSES_ERROR';\n\nconst pagination = {\n  total: 0,\n  offset: 0,\n};\n\nconst initialState = {\n  errors: null,\n  pending: true,\n  pagination,\n};\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_HOUSES_PENDING:\n      return { ...state, pending: true };\n    case FETCH_HOUSES_SUCCESS:\n      return { ...state, pending: false, ...action.payload, errors: null };\n    case FETCH_HOUSES_ERROR:\n      return { pending: false, errors: action.payload.errors, pagination };\n    default:\n      return state;\n  }\n}\n\nexport const fetchHouses = () => ({ type: FETCH_HOUSES_PENDING });\nexport const fetchHousesSuccess = payload => ({ type: FETCH_HOUSES_SUCCESS, payload });\nexport const fetchHousesError = payload => ({ type: FETCH_HOUSES_ERROR, payload });\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// styles\nimport './HouseCard.scss';\n\nconst IMG = 'https://images.jqestate.ru/';\nconst POSTFIX = '-thumbnail-512';\n\nconst HouseCard = props => {\n  const {\n    house: {\n      images,\n      id,\n      location: { settlementName, mkadDistance },\n      saleOffer,\n      landDetails: { area },\n      specification,\n    },\n  } = props;\n\n  return (\n    <div className=\"house\">\n      <div className=\"house-img\">\n        <img src={`${images[0] ? IMG + images[0].id + POSTFIX : ''}`} alt=\"house\" />\n      </div>\n      <p className=\"description\">{`Дом в посёлке${settlementName ? ` «${settlementName}»` : ''}${\n        mkadDistance ? ` ${mkadDistance} км` : ''\n      }, ID ${id}`}</p>\n      <h4>{`${saleOffer ? `$ ${saleOffer.price}` : 'не для продажи'}`}</h4>\n      <div className=\"specifications\">\n        <p>{`${area} сот`}</p>\n        {specification.area && (\n          <p className=\"area\">\n            {`${specification.area} м`}\n            <sup>2</sup>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nHouseCard.propTypes = {\n  house: PropTypes.shape({\n    images: PropTypes.instanceOf(Array),\n    id: PropTypes.number,\n    location: PropTypes.shape({\n      settlementName: PropTypes.string,\n      mkadDistance: PropTypes.number,\n    }),\n    saleOffer: PropTypes.shape({\n      price: PropTypes.number,\n    }),\n    landDetails: PropTypes.shape({\n      area: PropTypes.number,\n    }),\n    specification: PropTypes.shape({\n      area: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default HouseCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ReactPaginate from 'react-paginate';\n// actions\nimport { fetchHouses, fetchHousesSuccess, fetchHousesError } from '../../store/modules/houses';\n// components\nimport HouseCard from '../HouseCard/HouseCard';\n// styles\nimport './App.scss';\n\nconst API = `https://api.jqestate.ru/v1/properties/country`;\nconst LIMIT = 'pagination[limit]=';\nconst OFFSET = 'pagination[offset]=';\n\nclass App extends Component {\n  state = {\n    itemsPerPage: 12,\n    currentPage: 0,\n  };\n\n  componentDidMount() {\n    const {\n      state: { itemsPerPage, currentPage },\n    } = this;\n    const url = `${API}?${LIMIT + itemsPerPage}&${OFFSET + itemsPerPage * currentPage}`;\n    this.fetchData(url);\n  }\n\n  fetchData = url => {\n    const { props } = this;\n    props.fetchHouses();\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.errors) throw (data.errors && data.errors[0]) || 'Error';\n        props.fetchHousesSuccess({ ...data });\n      })\n      .catch(errors => props.fetchHousesError({ errors }));\n  };\n\n  handlePageChange = ({ selected }) => {\n    const { itemsPerPage } = this.state;\n    const url = `${API}?${LIMIT + itemsPerPage}&${OFFSET + itemsPerPage * selected}`;\n    this.fetchData(url);\n    this.setState({ currentPage: selected });\n  };\n\n  handleItemsChange = event => {\n    const itemsPerPage = parseInt(event.target.value, 10);\n    this.setState({ itemsPerPage, currentPage: 0 }, () => {\n      const url = `${API}?${LIMIT + itemsPerPage}&${OFFSET + 0}`;\n      this.fetchData(url);\n    });\n  };\n\n  render() {\n    const {\n      props: {\n        houses: {\n          pending,\n          pagination: { total },\n          items,\n          errors,\n        },\n      },\n      state: { currentPage, itemsPerPage },\n    } = this;\n    if (errors)\n      return (\n        <Fragment>\n          <h1>Error occured</h1>\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.handlePageChange({ selected: currentPage });\n            }}\n          >\n            Retry\n          </button>\n        </Fragment>\n      );\n    const pageCount = Math.ceil(total / itemsPerPage);\n\n    return (\n      <Fragment>\n        {pending ? (\n          <h1 className=\"loading\">Loading...</h1>\n        ) : (\n          <div className=\"houses\">\n            {items &&\n              items.map((element, id) => (\n                <HouseCard key={`house#${itemsPerPage * currentPage + id}`} HouseCard house={element} />\n              ))}\n          </div>\n        )}\n        <ReactPaginate\n          previousLabel=\"<\"\n          nextLabel=\">\"\n          breakClassName=\"break-me\"\n          pageCount={pageCount}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageChange}\n          containerClassName=\"pagination\"\n          subContainerClassName=\"pages pagination\"\n          activeClassName=\"active\"\n          forcePage={currentPage}\n        />\n        <div className=\"items-per-page\">\n          <p>На странице: </p>\n          <select value={itemsPerPage} onChange={this.handleItemsChange}>\n            <option value={12}>12</option>\n            <option value={24}>24</option>\n            <option value={48}>48</option>\n            <option value={96}>96</option>\n          </select>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  fetchHouses: PropTypes.func.isRequired,\n  fetchHousesSuccess: PropTypes.func.isRequired,\n  fetchHousesError: PropTypes.func.isRequired,\n  houses: PropTypes.shape({\n    pending: PropTypes.bool.isRequired,\n    pagination: PropTypes.shape({\n      offset: PropTypes.number,\n      total: PropTypes.number,\n    }),\n    items: PropTypes.instanceOf(Array),\n    errors: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string]),\n  }).isRequired,\n};\n\nconst mapStateToProps = store => ({ houses: store.houses });\n\nconst mapDispatchToProps = { fetchHouses, fetchHousesSuccess, fetchHousesError };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport houses from './store/modules/houses';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n  houses,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}